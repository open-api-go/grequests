package grequests

import (
	"context"
	"io"
	"net"
	"net/http"
	"net/url"
	"time"
)

// RequestOptions is the location that of where the data
type RequestOptions struct {

	// Data is a map of key values that will eventually convert into the
	// the body of a POST request.
	Data map[string]string

	// Params is a map of query strings that may be used within a GET request
	Params map[string]string

	// QueryStruct is a struct that encapsulates a set of URL query params
	// this paramter is mutually exclusive with `Params map[string]string` (they cannot be combined)
	// for more information please see https://godoc.org/github.com/google/go-querystring/query
	QueryStruct interface{}

	// Files is where you can include files to upload. The use of this data
	// structure is limited to POST requests
	Files []FileUpload

	// JSON can be used when you wish to send JSON within the request body
	JSON interface{}

	// XML can be used if you wish to send XML within the request body
	XML interface{}

	// Headers if you want to add custom HTTP headers to the request,
	// this is your friend
	Headers map[string]string

	// InsecureSkipVerify is a flag that specifies if we should validate the
	// server's TLS certificate. It should be noted that Go's TLS verify mechanism
	// doesn't validate if a certificate has been revoked
	InsecureSkipVerify bool

	// DisableCompression will disable gzip compression on requests
	DisableCompression bool

	// UserAgent allows you to set an arbitrary custom user agent
	UserAgent string

	// Host allows you to set an arbitrary custom host
	Host string

	// Auth allows you to specify a user name and password that you wish to
	// use when requesting the URL. It will use basic HTTP authentication
	// formatting the username and password in base64 the format is:
	// []string{username, password}
	Auth []string

	// IsAjax is a flag that can be set to make the request appear
	// to be generated by browser Javascript
	IsAjax bool

	// Cookies is an array of `http.Cookie` that allows you to attach
	// cookies to your request
	Cookies []*http.Cookie

	// UseCookieJar will create a custom HTTP client that will
	// process and store HTTP cookies when they are sent down
	UseCookieJar bool

	// Proxies is a map in the following format
	// *protocol* => proxy address e.g http => http://127.0.0.1:8080
	Proxies map[string]*url.URL

	// TLSHandshakeTimeout specifies the maximum amount of time waiting to
	// wait for a TLS handshake. Zero means no timeout.
	TLSHandshakeTimeout time.Duration

	// DialTimeout is the maximum amount of time a dial will wait for
	// a connect to complete.
	DialTimeout time.Duration

	// KeepAlive specifies the keep-alive period for an active
	// network connection. If zero, keep-alive are not enabled.
	DialKeepAlive time.Duration

	// RequestTimeout is the maximum amount of time a whole request(include dial / request / redirect)
	// will wait.
	RequestTimeout time.Duration

	// HTTPClient can be provided if you wish to supply a custom HTTP client
	// this is useful if you want to use an OAUTH client with your request.
	HTTPClient *http.Client

	// SensitiveHTTPHeaders is a map of sensitive HTTP headers that a user
	// doesn't want passed on a redirect.
	SensitiveHTTPHeaders map[string]struct{}

	// RedirectLimit is the acceptable amount of redirects that we should expect
	// before returning an error be default this is set to 30. You can change this
	// globally by modifying the `RedirectLimit` variable.
	RedirectLimit int

	// RequestBody allows you to put anything matching an `io.Reader` into the request
	// this option will take precedence over any other request option specified
	RequestBody io.Reader

	// CookieJar allows you to specify a special cookiejar to use with your request.
	// this option will take precedence over the `UseCookieJar` option above.
	CookieJar http.CookieJar

	// Context can be used to maintain state between requests https://golang.org/pkg/context/#Context
	Context context.Context

	// BeforeRequest is a hook that can be used to modify the request object
	// before the request has been fired. This is useful for adding authentication
	// and other functionality not provided in this library
	BeforeRequest func(req *http.Request) error `json:"-"`

	// LocalAddr allows you to send the request on any local interface
	LocalAddr *net.TCPAddr
}

func newRequestOptions(opts ...RequestOption) *RequestOptions {
	opt := getRequestOptions()
	for _, o := range opts {
		if o == nil {
			continue
		}
		o(opt)
	}
	return opt
}

// Data is a map of key values that will eventually convert into the
// the body of a POST request.
func Data(d map[string]string) RequestOption {
	return func(o *RequestOptions) {
		o.Data = d
	}
}

// Params is a map of query strings that may be used within a GET request
func Params(p map[string]string) RequestOption {
	return func(o *RequestOptions) {
		o.Params = p
	}
}

// QueryStruct is a struct that encapsulates a set of URL query params
// this paramter is mutually exclusive with `Params map[string]string` (they cannot be combined)
// for more information please see https://godoc.org/github.com/google/go-querystring/query
func QueryStruct(q interface{}) RequestOption {
	return func(o *RequestOptions) {
		o.QueryStruct = q
	}
}

// Files is where you can include files to upload. The use of this data
// structure is limited to POST requests
func Files(files []FileUpload) RequestOption {
	return func(o *RequestOptions) { o.Files = files }
}

// JSON can be used when you wish to send JSON within the request body
func JSON(JSON interface{}) RequestOption {
	return func(o *RequestOptions) { o.JSON = JSON }
}

// XML can be used if you wish to send XML within the request body
func XML(XML interface{}) RequestOption {
	return func(o *RequestOptions) {
		o.XML = XML
	}
}

// Headers if you want to add custom HTTP headers to the request,
// this is your friend
func Headers(h map[string]string) RequestOption {
	return func(o *RequestOptions) {
		o.Headers = h
	}
}

// InsecureSkipVerify is a flag that specifies if we should validate the
// server's TLS certificate. It should be noted that Go's TLS verify mechanism
// doesn't validate if a certificate has been revoked
func InsecureSkipVerify(b bool) RequestOption {
	return func(o *RequestOptions) {
		o.InsecureSkipVerify = b
	}
}

// DisableCompression will disable gzip compression on requests
func DisableCompression(b bool) RequestOption {
	return func(o *RequestOptions) {
		o.DisableCompression = b
	}
}

// UserAgent allows you to set an arbitrary custom user agent
func UserAgent(ua string) RequestOption {
	return func(o *RequestOptions) {
		o.UserAgent = ua
	}
}

// Host allows you to set an arbitrary custom host
func Host(host string) RequestOption {
	return func(o *RequestOptions) {
		o.Host = host
	}
}

// Auth allows you to specify a user name and password that you wish to
// use when requesting the URL. It will use basic HTTP authentication
// formatting the username and password in base64 the format is:
// []string{username, password}
func Auth(a []string) RequestOption {
	return func(o *RequestOptions) {
		o.Auth = a
	}
}

// IsAjax is a flag that can be set to make the request appear
// to be generated by browser Javascript
func IsAjax(b bool) RequestOption {
	return func(o *RequestOptions) { o.IsAjax = b }
}

// Cookies is an array of `http.Cookie` that allows you to attach cookies to your request
func Cookies(c []*http.Cookie) RequestOption {
	return func(o *RequestOptions) {
		o.Cookies = c
	}
}

// UseCookieJar will create a custom HTTP client that will
// process and store HTTP cookies when they are sent down
func UseCookieJar(b bool) RequestOption {
	return func(o *RequestOptions) {
		o.UseCookieJar = b
	}
}

// Proxies is a map in the following format
// *protocol* => proxy address e.g http => http://127.0.0.1:8080
func Proxies(p map[string]*url.URL) RequestOption {
	return func(o *RequestOptions) {
		o.Proxies = p
	}
}

// TLSHandshakeTimeout specifies the maximum amount of time waiting to
// wait for a TLS handshake. Zero means no timeout.
func TLSHandshakeTimeout(d time.Duration) RequestOption {
	return func(o *RequestOptions) {
		o.TLSHandshakeTimeout = d
	}
}

// DialTimeout is the maximum amount of time a dial will wait for
// a connect to complete.
func DialTimeout(d time.Duration) RequestOption {
	return func(o *RequestOptions) {
		o.DialTimeout = d
	}
}

// KeepAlive specifies the keep-alive period for an active
// network connection. If zero
func DialKeepAlive(d time.Duration) RequestOption {
	return func(o *RequestOptions) {
		o.DialKeepAlive = d
	}
}

// RequestTimeout is the maximum amount of time a whole request(include dial / request / redirect)
// will wait.
func RequestTimeout(d time.Duration) RequestOption {
	return func(o *RequestOptions) {
		o.RequestTimeout = d
	}
}

// HTTPClient can be provided if you wish to supply a custom HTTP client
// this is useful if you want to use an OAUTH client with your request.
func HTTPClient(c *http.Client) RequestOption {
	return func(o *RequestOptions) {
		o.HTTPClient = c
	}
}

// SensitiveHTTPHeaders is a map of sensitive HTTP headers that a user
// doesn't want passed on a redirect.
func SensitiveHTTPHeaders(h map[string]struct{}) RequestOption {
	return func(o *RequestOptions) {
		o.SensitiveHTTPHeaders = h
	}
}

// RedirectLimit is the acceptable amount of redirects that we should expect
// before returning an error be default this is set to 30. You can change this
// globally by modifying the `RedirectLimit` variable.
func RedirectLimit(rl int) RequestOption {
	return func(o *RequestOptions) {
		o.RedirectLimit = rl
	}
}

// RequestBody allows you to put anything matching an `io.Reader` into the request
// this option will take precedence over any other request option specified
func RequestBody(b io.Reader) RequestOption {
	return func(o *RequestOptions) {
		o.RequestBody = b
	}
}

// CookieJar allows you to specify a special cookiejar to use with your request.
// this option will take precedence over the `UseCookieJar` option above.
func CookieJar(cj http.CookieJar) RequestOption {
	return func(o *RequestOptions) {
		o.CookieJar = cj
	}
}

// Context can be used to maintain state between requests https://golang.org/pkg/context/#Context
func Context(ctx context.Context) RequestOption {
	return func(o *RequestOptions) {
		o.Context = ctx
	}
}

// BeforeRequest is a hook that can be used to modify the request object
// before the request has been fired. This is useful for adding authentication
// and other functionality not provided in this library
func BeforeRequest(fn func(req *http.Request) error) RequestOption {
	return func(o *RequestOptions) {
		o.BeforeRequest = fn
	}
}

// LocalAddr allows you to send the request on any local interface
func LocalAddr(la *net.TCPAddr) RequestOption {
	return func(o *RequestOptions) {
		o.LocalAddr = la
	}
}
